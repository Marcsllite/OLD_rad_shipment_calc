plugins {
    id 'java'
    id 'application'
    id 'jacoco'
    id "org.openjfx.javafxplugin" version "0.0.9"
    id "org.sonarqube" version "3.2.0"
}

version '1.0'
tasks['sonarqube'].dependsOn jacocoTestReport
tasks['jacocoTestReport'].dependsOn test
sourceCompatibility = 11

repositories {
    mavenCentral()
}

dependencies {
    compile 'org.jetbrains:annotations:17.0.0'
    compile 'at.favre.lib:hkdf:1.1.0'
    compile 'com.hp.gagawa:gagawa:1.0.1'
    compile 'com.jcraft:jsch:0.1.55'
    compile 'joda-time:joda-time:2.10.2'
    compile 'org.hamcrest:hamcrest-all:1.3'
    compile 'org.hamcrest:hamcrest-core:1.3'
    compile 'oro:oro:2.0.8'  // needed for commons-validator
    compile 'commons-validator:commons-validator:1.3.1'
    compile group: 'com.h2database', name: 'h2', version: '1.4.199'
    compile group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.14.1'
    compile group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.14.1'
    
    compile group: 'junit', name: 'junit', version: '4.12'
    compile 'com.google.guava:guava:23.0'
    compile 'org.assertj:assertj-core:3.11.1'
    compile 'org.hamcrest:hamcrest-junit:2.0.0.0'
    compile 'org.jfxtras:openjfx-monocle:1.8.0_20'
    compile 'org.loadui:testFx:3.1.2'
    compile 'org.mockito:mockito-core:3.0.0'
    compile 'org.testfx:testfx-junit:4.0.15-alpha'
    compile 'org.testfx:testfx-core:4.0.15-alpha'


    compile 'org.testfx:testfx-internal-java9:4.0.9-alpha'
}

javafx {
    version = "15.0.1"
    modules = [ 'javafx.controls', 'javafx.fxml' ]
}

application {
    mainClassName = 'rad.shipment.calculator.gui.Main'
}

sonarqube {
    properties {
        property 'sonar.host.url', 'http://localhost:9000'
        property 'sonar.coverage.jacoco.xmlReportPaths', file("${buildDir}/reports/jacoco/report.xml")
    }
}

jacoco {
    toolVersion = "0.8.4"
}

jacocoTestReport {
    executionData fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec")

    subprojects.each {
        sourceSets = it.sourceSets.main
    }

    reports {
        xml.enabled = true
        xml.destination file("${buildDir}/reports/jacoco/report.xml")
        html.enabled = true
    }
}

sourceSets {
    integTest {
        java.srcDir file('src/main/java')
        resources.srcDir file('src/main/resources')
        compileClasspath += sourceSets.main.output + configurations.testRuntimeClasspath
        runtimeClasspath += output + compileClasspath
    }
}

test {
    // True for verbose logging
    testLogging.showStandardStreams = false

    // listen to events in the test execution lifecycle
    beforeTest { descriptor ->
        logger.lifecycle("Running " + (String)descriptor)
    }
}

jacocoTestReport.dependsOn {
    subprojects*.test
}