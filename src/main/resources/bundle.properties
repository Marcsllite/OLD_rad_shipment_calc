# Titles/Names for the different pages of the application
mainPane= UMass Lowell - Rad Shipment Calculator
mainName= Main Page
menuPane= Rad Shipment Calculator - Menu Page
menuName= Menu Page
homePane= Rad Shipment Calculator - Home Page
homeName= Home Page
referencePane= Rad Shipment Calculator - Reference Page
referenceName= Reference Page
addPane= Rad Shipment Calculator - Add Page
addName= Add Page
editPane= Rad Shipment Calculator - Edit Page
editName= Edit Page
shipmentInfoPane= Rad Shipment Calculator - Shipment Information
shipmentName= Shipment Details
summaryPane= Rad Shipment Calculator - Summary Page
summaryName= Summary Page
summaryReport= Rad Shipment Calculator - Summary Report
summaryReportName= Summary Report Page

# Operating Systems
windows= Windows
mac= MAC
unix= Unix
solaris= Solaris
noSupport= Not Supported

# Heights and Widths for different panes of the application
mainWidth= 600
maxMainWidth= 950
mainHeight= 500
maxMainHeight= 850
menuWidth= 150
menuHeight= 500
homeWidth= 600
homeHeight= 500
referenceWidth= 600
referenceHeight= 500
summaryWidth= 600
summaryHeight= 400
modifyHeight= 320
modifyWidth= 450
shipmentDetailsHeight= 270
shipmentDetailsWidth= 450

# css
umlBlue= #0469B1
defaultWhite= #fff
defaultGrey= #8a8a8a

# constant values added here instead of being initialized in their classes
appFolderName= UMass Lowell Radiation Safety
appMainFolder= Shipment Calculator
windowMinWidth= 250
windowMaxWidth= 325
defaultWindowTitle= Window
defaultConfirmTitle= Confirmation Window
defaultInformationTitle= Information Window
windowCloseMsg= User closed the Window
confirmCloseMsg= User closed the Confirmation Window
informationCloseMsg= User closed the Information Window
properTitle= This is a proper title
properMessage= This is a proper message
properBtnText= This is a proper button text
properBtnID= btnProperID
positiveBtnID= btnPositive
negativeBtnID= btnNegative
okayBtnID= btnOkay
defaultMessage = No Message
defaultBtn= button
usrBtnClick= User clicked the {0} button
usrMenuBtnClick= User clicked the {0} menu button ({1}) times
properException= This is a proper Exception
timeout= 1000
port= 22
domain= uml.edu
defaultStr= Not Available
defaultInt= -2
tableDatePattern= MMM dd, yyyy
datePattern= MM/dd/yyyy
dateNormalFormat= MM/dd/yyyy hh:mm:ss a
dateFileNameFormat= MMddyyyy_HH-mm-ss
logFileName= ShipmentCalculator.log
fileChooserTitle= Select Import File
dirChooserTitle= Select save location
hmacInstance= HmacSHA256
cipherInstance= AES/CBC/PKCS5Padding
secretKeyVar2= AES
encKeyLength= 16
authKeyLength= 32
replaceBundleStringRegex= (\\{\\d+})

# Error/Exception Strings

# Database
defaultDBPath= ./db/database{0}
h2DB_Driver= org.h2.Driver
h2DB_Path= jdbc:h2:./db/ShipmentCalculatorLocal
testDB_Path= jdbc:h2:./db/test
h2DB_Settings= ;MV_STORE=FALSE;MVCC=FALSE;ACCESS_MODE_DATA=rw
DB_User= superuser
DB_Pass= SnayRadiation
SQLiteDB_Driver= org.sqlite.JDBC
SQLiteDB_Path= jdbc:sqlite:

#Database Tables
isotopesTableName= Isotopes
isotopesTableQuery= select {0} from Isotopes where {1}
createIsotopesTableCSV= create table if not exists Isotopes (Name varchar(255) not null, Abbr char(15) not null, primary key (Name, Abbr)) as \
                        select * from csvread('{0}')
updateIsotopesTable= merge into Isotopes values('{0}', '{1}')
updateIsotopesTableCSV= call csvwrite('{0}', 'select * from Isotopes')

shortLongTableName= ShortLong
shortLongTableQuery= select {0} from ShortLong
createShortLongTableCSV= create table if not exists ShortLong (Name varchar(255) not null, Abbr char(15) not null, primary key (Name, Abbr)) as \
                        select * from csvread('{0}')
updateShortLongTable= merge into ShortLong values('{0}', '{1}')
updateShortLongTableCSV= call csvwrite('{0}', 'select * from ShortLong')

A1TableName= A1
A1TableQuery= select {0} from A1 where {1}
createA1TableCSV= create table if not exists A1 (Abbr char(15) not null, Value real, primary key (Abbr)) as \
                    select * from csvread('{0}')
updateA1TableAbbr= update A1 set Abbr = '{0}' where Abbr = '{1}'
updateA1TableValue= update A1 set Value = {0} where Abbr = '{1}'
addToA1Table= merge into A1 values('{0}', {1})
updateA1TableCSV= call csvwrite('{0}', 'select * from A1')

A2TableName= A2
A2TableQuery= select {0} from A2 where {1}
createA2TableCSV= create table if not exists A2 (Abbr char(15) not null, Value real, primary key (Abbr)) as \
                    select * from csvread('{0}')
updateA2TableAbbr= update A2 set Abbr = '{0}' where Abbr = '{1}'
updateA2TableValue= update A2 set Value = {0} where Abbr = '{1}'
addToA2Table= merge into A2 values('{0}', {1})
updateA2TableCSV= call csvwrite('{0}', 'select * from A2')

decayConstTableName= Decay_Constant
decayConstTableQuery= select {0} from Decay_Constant where {1}
createDecayConstTableCSV= create table if not exists Decay_Constant (Abbr char(15) not null, Value real, primary key (Abbr)) as \
                            select * from csvread('{0}')
updateDecayConstTableAbbr= update Decay_Constant set Abbr = '{0}' where Abbr = '{1}'
updateDecayConstTableValue= update Decay_Constant set Value = {0} where Abbr = '{1}'
addToDecayConstTable= merge into Decay_Constant values('{0}', {1})
updateDecayConstTableCSV= call csvwrite('{0}', 'select * from Decay_Constant')

exemptConTableName= Exempt_Concentration
exemptConTableQuery= select {0} from Exempt_Concentration where {1}
createExemptConTableCSV= create table if not exists Exempt_Concentration (Abbr char(15) not null, Value real, primary key (Abbr)) as \
                            select * from csvread('{0}')
updateExemptConTableAbbr= update Exempt_Concentration set Abbr = '{0}' where Abbr = '{1}'
updateExemptConTableValue= update Exempt_Concentration set Value = {0} where Abbr = '{1}'
addToExemptConTable= merge into Exempt_Concentration values('{0}', {1})
updateExemptConTableCSV= call csvwrite('{0}', 'select * from Exempt_Concentration')

exemptLimTableName= Exempt_Limit
exemptLimTableQuery= select {0} from Exempt_Limit where {1}
createExemptLimTableCSV= create table if not exists Exempt_Limit (Abbr char(15) not null, Value real, primary key (Abbr)) as \
                            select * from csvread('{0}')
updateExemptLimTableAbbr= update Exempt_Limit set Abbr = '{0}' where Abbr = '{1}'
updateExemptLimTableValue= update Exempt_Limit set Value = {0} where Abbr = '{1}'
addToExemptLimTable= merge into Exempt_Limit values('{0}', {1})
updateExemptLimTableCSV= call csvwrite('{0}', 'select * from Exempt_Limit')

halfLifeTableName= HalfLife
halfLifeTableQuery= select {0} from HalfLife where {1}
createHalfLifeTableCSV= create table if not exists HalfLife (Abbr char(15) not null, Value real, primary key (Abbr)) as \
                        select * from csvread('{0}')
updateHalfLifeTableAbbr= update HalfLife set Abbr = '{0}' where Abbr = '{1}'
updateHalfLifeTableValue= update HalfLife set Value = {0} where Abbr = '{1}'
addToHalfLifeTable= merge into HalfLife values('{0}', {1})
updateHalfLifeTableCSV= call csvwrite('{0}', 'select * from HalfLife')

instrArtLimLimTableName= Instr_Art_Limited_Limit
instrArtLimLimTableQuery= select {0} from Instr_Art_Limited_Limit where {1}
createInstrArtLimLimTableCSV= create table if not exists Instr_Art_Limited_Limit (State char(6) not null, Form char(7) not null, Value real, primary key (State, Form)) as \
                                select * from csvread('{0}')
updateInstrArtLimLimTableValue= merge into Instr_Art_Limited_Limit values('{0}', '{1}', {2})
updateInstrArtLimLimTableCSV= call csvwrite('{0}', 'select * from Instr_Art_Limited_Limit')

instrArtPackageLimTableName= Instr_Art_Package_Limit
instrArtPackageLimTableQuery= select {0} from Instr_Art_Package_Limit where {1}
createInstrArtPackageLimTableCSV= create table if not exists Instr_Art_Package_Limit (State char(6) not null, Form char(7) not null, Value real, primary key (State, Form)) as \
                                    select * from csvread('{0}')
updateInstrArtPackageLimTableValue= merge into Instr_Art_Package_Limit values values('{0}', '{1}', {2})
updateInstrArtPackageLimTableCSV= call csvwrite('{0}', 'select * from Instr_Art_Package_Limit')

licLimTableName= Licensing_Limit
licLimTableQuery= select {0} from Licensing_Limit where {1}
createLicLimTableCSV= create table if not exists Licensing_Limit (Abbr char(15) not null, Value real, primary key (Abbr)) as \
                        select * from csvread('{0}')
updateLicLimTableAbbr= update Licensing_Limit set Abbr = '{0}' where Abbr = '{1}'
updateLicLimTableValue= update Licensing_Limit set Value = {0} where Abbr = '{1}'
addToLicLimTable= merge into Licensing_Limit values('{0}', {1})
updateLicLimTableCSV= call csvwrite('{0}', 'select * from Licensing_Limit')

limLimitTableName= Limited_Limit
limLimitTableQuery= select {0} from Limited_Limit where {1}
createLimLimitTableCSV= create table if not exists Limited_Limit (State char(6) not null, Form char(7) not null, Value real, primary key (State, Form)) as \
                        select * from csvread('{0}')
updateLimLimitTableValue= merge into Limited_Limit values values('{0}', '{1}', {2})
updateLimLimitTableCSV= call csvwrite('{0}', 'select * from Limited_Limit')

reportQTableName= Reportable_Quantity
reportQTableQuery= select {0} from Reportable_Quantity where {1}
createReportQTableCSV= create table if not exists Reportable_Quantity (Abbr char(15) not null, Value real, primary key (Abbr)) as \
                        select * from csvread('{0}')
updateReportQTableAbbr= update Reportable_Quantity set Abbr = '{0}' where Abbr = '{1}'
updateReportQTableValue= update Reportable_Quantity set Value = {0} where Abbr = '{1}'
addToReportQTable= merge into Reportable_Quantity values('{0}', {1})
updateReportQTableCSV= call csvwrite('{0}', 'select * from Reportable_Quantity')

# Database table columns
nameCol= Name
abbrCol= Abbr
stateCol= State
formCol= Form
valueCol= Value

#Testing
replaceBundleString_noText=
replaceBundleString_noReplacements= This string doesn't contain any replacements
replaceBundleString_oneReplacement= This string contains {0} replacements
replaceBundleString_wrongNumber= This string contains the incorrect {1} for replacement
replaceBundleString_twoReplacements= This string contains {0}, {1} replacements
replaceBundleString_threeReplacements= This string contains {0}, {1}, {2} replacements
replaceBundleString_oneSameReplacements= This string contains a replacement here: {0}, and the same replacement here: {0}
replaceBundleString_twoSameReplacements= First: {0}, Second: {1}, Third: {0}, Fourth: {1}